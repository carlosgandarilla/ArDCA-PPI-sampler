#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
"""
	'tokens2aminoacids' 
Converts a 𝐿×𝑀 matrix of integers into a 𝑀×𝐿 matrix of letters:

* 'tokens_matrix': is a 𝐿×𝑀 matrix of integers (sampled sequences from ArDCA models). 
"""

function tokens2aminoacids(tokens_matrix::Matrix{Int})
    
    #---------------------------------------------------------------------------------------
    # Maps between the aminoacid symbols and the integers using this dictionary
    dictionary = Dict('-'=>20, 'A'=>0, 'C'=>1, 'D'=>2, 'E'=>3, 'F'=>4, 'G'=>5, 'H'=>6, 'I'=>7, 'K'=>8, 'L'=>9, 'M'=>10, 'N'=>11, 'P'=>12, 'Q'=>13, 'R'=>14, 'S'=>15, 'T'=>16, 'V'=>17, 'W'=>18, 'Y'=>19)
    
    #---------------------------------------------------------------------------------------
    # Loops over sequences and converts from interger to letter following 'dictionary'.
    M, L = size(tokens_matrix)
    strings = Array{Char}(undef, M, L)
    
    for i in 1:M, j in 1:L
        strings[i,j] = first(filter(kv -> kv[2] == tokens_matrix[i,j], dictionary))[1]
    end
    
    return strings
    
end



#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
"""
	'write_fasta' 
Saves a 𝐿×𝑀 matrix of integer into a fasta file, using 'descriptions' as sequence headers.
If 'descriptions' is empty, it will generate a sequential header:

* 'data': is a 𝐿×𝑀 matrix of integer (sampled sequences from ArDCA models),
* 'output_name': is output file in fasta format, 
* 'descriptions': are the sequence headers. 
"""


function write_fasta(data::Matrix{Int}, 
			output_name::String, 
			descriptions=[])
			
    #data is a 𝐿×𝑀 matrix of integer (sampled sequences from ArDCA models),
    #output_name is output file in fasta format, 
    #descriptions are the sequence headers. 
    
    data = data'
    
    #---------------------------------------------------------------------------------------
    # Converts 𝐿×𝑀 matrix of integer into 𝑀×𝐿 matrix of letters (MSA).
    #...Each row representing an amino-acid sequence. 
    msa = tokens2aminoacids(data .- 1)
    M, L = size(msa)

    #---------------------------------------------------------------------------------------
    # Saves 𝐿×𝑀 matrix of letters into a fasta file
    out_file = open(output_name, "w")
    for i in 1:M
        # Got a sequence
        seq = join(msa[i,:],"")
        # Composes header and sequence
        if descriptions==[]
            record = FASTA.Record("$i", seq)
        else
            record = FASTA.Record(descriptions[i], seq)
        end
        # Writes header and sequence.
        write(out_file, record)
        # Adds newline after each sequence
        println(out_file)  
    end
    
    close(out_file)
    
end



#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------
"""
    'write_fasta' 
Saves ArDCA sample data in HDF5 format with the following groups:

* 'num_seqsA': is the number (𝑀a) of samples for family A.
* 'num_amino-acids_A': is the number (𝐿a) of amino acids for family A.
* 'seqsA': is the 𝐿a×𝑀a matrix of integer (sample sequences for family A).
* 'num_seqsB': is the number (𝑀b) of samples for family B.
* 'num_amino-acids_B': is the number (𝐿b) of amino acids for family B.
* 'seqsB': is the 𝐿b×𝑀b matrix of integer (sample sequences for family B).
* 'interactions': is the interaction map.
"""


function write_h5(datA::Matrix{Int}, 
		datB::Matrix{Int}, 
		outputfastafile::String, 
		interact::Array{Int64,2})
    
    #---------------------------------------------------------------------------------------
    # We write sampled sequences in HDF5 format    
    #numbered alignment for protA
    h5write(outputfastafile, "seqsA", datA)
    La, Ma = size(datA)
    #number of protA sequences
    h5write(outputfastafile, "num_seqsA", Ma)
    #amino-acids length for protA
    h5write(outputfastafile, "num_amino-acids_A", La)    
    #numbered alignment for protB
    h5write(outputfastafile, "seqsB", datB)
    Lb, Mb = size(datB)
    #number of protB sequences
    h5write(outputfastafile, "num_seqsB", Mb)
    #amino-acids length for protB
    h5write(outputfastafile, "num_amino-acids_B", Lb)
    #list of interactions
    h5write(outputfastafile, "interactions", interact)
    ##number of species
    ##h5write(outputfastafile, "num_species", K)
    ##testing set
    #test_set_json = JSON3.write(test_set)
    #h5write(outputfastafile, "testing_set", test_set_json)
    ##name of species
    #h5write(fn_save, "name_species", spec_names)
    
end




#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------
